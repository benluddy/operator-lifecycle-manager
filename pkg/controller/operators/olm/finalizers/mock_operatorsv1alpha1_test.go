// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/operator-framework/operator-lifecycle-manager/pkg/api/client/clientset/versioned/typed/operators/v1alpha1 (interfaces: ClusterServiceVersionsGetter,ClusterServiceVersionInterface)

// Package finalizers is a generated GoMock package.
package finalizers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/operator-framework/api/pkg/operators/v1alpha1"
	v1alpha10 "github.com/operator-framework/operator-lifecycle-manager/pkg/api/client/clientset/versioned/typed/operators/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockClusterServiceVersionsGetter is a mock of ClusterServiceVersionsGetter interface.
type MockClusterServiceVersionsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceVersionsGetterMockRecorder
}

// MockClusterServiceVersionsGetterMockRecorder is the mock recorder for MockClusterServiceVersionsGetter.
type MockClusterServiceVersionsGetterMockRecorder struct {
	mock *MockClusterServiceVersionsGetter
}

// NewMockClusterServiceVersionsGetter creates a new mock instance.
func NewMockClusterServiceVersionsGetter(ctrl *gomock.Controller) *MockClusterServiceVersionsGetter {
	mock := &MockClusterServiceVersionsGetter{ctrl: ctrl}
	mock.recorder = &MockClusterServiceVersionsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterServiceVersionsGetter) EXPECT() *MockClusterServiceVersionsGetterMockRecorder {
	return m.recorder
}

// ClusterServiceVersions mocks base method.
func (m *MockClusterServiceVersionsGetter) ClusterServiceVersions(arg0 string) v1alpha10.ClusterServiceVersionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterServiceVersions", arg0)
	ret0, _ := ret[0].(v1alpha10.ClusterServiceVersionInterface)
	return ret0
}

// ClusterServiceVersions indicates an expected call of ClusterServiceVersions.
func (mr *MockClusterServiceVersionsGetterMockRecorder) ClusterServiceVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterServiceVersions", reflect.TypeOf((*MockClusterServiceVersionsGetter)(nil).ClusterServiceVersions), arg0)
}

// MockClusterServiceVersionInterface is a mock of ClusterServiceVersionInterface interface.
type MockClusterServiceVersionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceVersionInterfaceMockRecorder
}

// MockClusterServiceVersionInterfaceMockRecorder is the mock recorder for MockClusterServiceVersionInterface.
type MockClusterServiceVersionInterfaceMockRecorder struct {
	mock *MockClusterServiceVersionInterface
}

// NewMockClusterServiceVersionInterface creates a new mock instance.
func NewMockClusterServiceVersionInterface(ctrl *gomock.Controller) *MockClusterServiceVersionInterface {
	mock := &MockClusterServiceVersionInterface{ctrl: ctrl}
	mock.recorder = &MockClusterServiceVersionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterServiceVersionInterface) EXPECT() *MockClusterServiceVersionInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusterServiceVersionInterface) Create(arg0 context.Context, arg1 *v1alpha1.ClusterServiceVersion, arg2 v1.CreateOptions) (*v1alpha1.ClusterServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockClusterServiceVersionInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockClusterServiceVersionInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockClusterServiceVersionInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions) (*v1alpha1.ClusterServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockClusterServiceVersionInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*v1alpha1.ClusterServiceVersionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockClusterServiceVersionInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*v1alpha1.ClusterServiceVersion, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockClusterServiceVersionInterface) Update(arg0 context.Context, arg1 *v1alpha1.ClusterServiceVersion, arg2 v1.UpdateOptions) (*v1alpha1.ClusterServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).Update), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockClusterServiceVersionInterface) UpdateStatus(arg0 context.Context, arg1 *v1alpha1.ClusterServiceVersion, arg2 v1.UpdateOptions) (*v1alpha1.ClusterServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).UpdateStatus), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockClusterServiceVersionInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClusterServiceVersionInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterServiceVersionInterface)(nil).Watch), arg0, arg1)
}
